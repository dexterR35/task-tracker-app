rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for security validation
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isUserActive() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isActive != false);
    }
    
    // Simplified version for when we're already reading the user document
    function isUserActiveFromData(userData) {
      return isAuthenticated() && userData.isActive != false;
    }
    
    // Fallback function for users without isActive field
    function isUserValid() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    
    function isAdmin() {
      return (isUserActive() || isUserValid()) && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function hasPermission(permission) {
      return (isUserActive() || isUserValid()) && 
             permission in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.permissions;
    }
    
    // Helper function to check if user has permission OR is admin
    function hasPermissionOrAdmin(permission) {
      return isAdmin() || hasPermission(permission);
    }
    
    function isValidMonthId(monthId) {
      return monthId.matches('^[0-9]{4}-[0-9]{2}$');
    }
    
    function isValidTaskData() {
      return request.resource.data.keys().hasAll(['taskName', 'userUID', 'monthId', 'createdAt', 'createbyUID']) &&
             request.resource.data.userUID is string &&
             request.resource.data.monthId is string &&
             request.resource.data.createdAt is string &&
             request.resource.data.createbyUID is string &&
             request.resource.data.taskName is string &&
             request.resource.data.userUID.size() > 0 &&
             request.resource.data.monthId.size() > 0 &&
             request.resource.data.dataInfo is map;
    }
    
    function isValidBoardData() {
      return request.resource.data.keys().hasAll(['monthId', 'boardId', 'createdAt', 'createdBy', 'createdByRole']) &&
             request.resource.data.monthId is string &&
             request.resource.data.boardId is string &&
             request.resource.data.createdAt is timestamp &&
             request.resource.data.createdBy is string &&
             request.resource.data.createdByRole is string &&
             isValidMonthId(request.resource.data.monthId);
    }
    
    // Users collection rules
    match /users/{userId} {
      // Users can read their own data, admins can read all
      // TEMPORARILY PERMISSIVE FOR DEBUGGING - Allow all authenticated users to read
      allow read: if isAuthenticated();
      
      // Allow write for authenticated users (temporarily permissive for debugging)
      allow write: if isAuthenticated();
    }
    
    // Reporters collection rules
    match /reporters/{reporterId} {
      // All authenticated users can read reporters
      allow read: if isAuthenticated();
      
      // Allow write for authenticated users (temporarily permissive for debugging)
      allow write: if isAuthenticated();
    }
    
    // Tasks collection (month boards) - TEMPORARILY VERY PERMISSIVE FOR DEBUGGING
    match /tasks/{monthId} {
      // Allow all operations for authenticated users (temporarily permissive)
      allow read, write: if isAuthenticated();
      
      // Month tasks subcollection - TEMPORARILY VERY PERMISSIVE FOR DEBUGGING
      match /monthTasks/{taskId} {
        // Allow all operations for authenticated users (temporarily permissive)
        allow read, write: if isAuthenticated();
      }
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
